import asyncio
import platform
from sys import version as pyver
from datetime import datetime

import psutil
from pyrogram import __version__ as pyrover
from pyrogram import filters
from pyrogram.errors import MessageIdInvalid
from pyrogram.types import CallbackQuery, InputMediaPhoto, Message, ReplyKeyboardMarkup
from pytgcalls.__version__ import __version__ as pytgver

import config
from config import BANNED_USERS, MUSIC_BOT_NAME
from strings import get_command
from AnonX import YouTube, app
from AnonX import app as Client
from AnonX.core.userbot import assistants
from AnonX.misc import SUDOERS, pymongodb
from strings.filters import command
from AnonX.plugins import ALL_MODULES
from AnonX.utils.database import (get_global_tops,
                                       get_particulars, get_queries,
                                       get_served_chats,
                                       get_served_users, get_sudoers,
                                       get_top_chats, get_topp_users, get_client)
from AnonX.utils.decorators.language import language, languageCB
from AnonX.utils.inline.stats import (back_stats_buttons,
                                           back_stats_markup,
                                           get_stats_markup,
                                           overallback_stats_markup,
                                           stats_buttons,
                                           top_ten_stats_markup)

loop = asyncio.get_running_loop()


# Commands
GSTATS_COMMAND = get_command("GSTATS_COMMAND")
STATS_COMMAND = get_command("STATS_COMMAND")


@app.on_message(
    command(STATS_COMMAND)
    & filters.group
    & ~BANNED_USERS
)
@language
async def stats_global(client, message: Message, _):
    upl = stats_buttons(
        _, True if message.from_user.id in SUDOERS else False
    )
    await message.reply_photo(
        photo=config.STATS_IMG_URL,
        caption=_["gstats_11"].format(config.MUSIC_BOT_NAME),
        reply_markup=upl,
    )


@app.on_message(
    command(GSTATS_COMMAND)
    & filters.group
    & ~BANNED_USERS
)
@language
async def gstats_global(client, message: Message, _):
    mystic = await message.reply_text(_["gstats_1"])
    stats = await get_global_tops()
    if not stats:
        await asyncio.sleep(1)
        return await mystic.edit(_["gstats_2"])

    def get_stats():
        results = {}
        for i in stats:
            top_list = stats[i]["spot"]
            results[str(i)] = top_list
            list_arranged = dict(
                sorted(
                    results.items(),
                    key=lambda item: item[1],
                    reverse=True,
                )
            )
        if not results:
            return mystic.edit(_["gstats_2"])
        videoid = None
        co = None
        for vidid, count in list_arranged.items():
            if vidid == "telegram":
                continue
            else:
                videoid = vidid
                co = count
            break
        return videoid, co

    try:
        videoid, co = await loop.run_in_executor(None, get_stats)
    except Exception as e:
        print(e)
        return
    (
        title,
        duration_min,
        duration_sec,
        thumbnail,
        vidid,
    ) = await YouTube.details(videoid, True)
    title = title.title()
    final = f"·¥õ·¥è·¥© ·¥ç·¥ès·¥õ ·¥© ü·¥Ä è·¥á·¥Ö ·¥õ Ä·¥Ä·¥Ñ·¥ã ·¥è…¥ {MUSIC_BOT_NAME}\n\n**·¥õ…™·¥õ ü·¥á:** {title}\n\n·¥© ü·¥Ä è·¥á·¥Ö** {co} **·¥õ…™·¥ç·¥ás."
    upl = get_stats_markup(
        _, True if message.from_user.id in SUDOERS else False
    )
    await app.send_photo(
        message.chat.id,
        photo=thumbnail,
        caption=final,
        reply_markup=upl,
    )
    await mystic.delete()


@app.on_callback_query(filters.regex("GetStatsNow") & ~BANNED_USERS)
@languageCB
async def top_users_ten(client, CallbackQuery: CallbackQuery, _):
    chat_id = CallbackQuery.message.chat.id
    callback_data = CallbackQuery.data.strip()
    what = callback_data.split(None, 1)[1]
    upl = back_stats_markup(_)
    try:
        await CallbackQuery.answer()
    except:
        pass
    mystic = await CallbackQuery.edit_message_text(
        _["gstats_3"].format(
            f"of {CallbackQuery.message.chat.title}"
            if what == "Here"
            else what
        )
    )
    if what == "Tracks":
        stats = await get_global_tops()
    elif what == "Chats":
        stats = await get_top_chats()
    elif what == "Users":
        stats = await get_topp_users()
    elif what == "Here":
        stats = await get_particulars(chat_id)
    if not stats:
        await asyncio.sleep(1)
        return await mystic.edit(_["gstats_2"], reply_markup=upl)
    queries = await get_queries()

    def get_stats():
        results = {}
        for i in stats:
            top_list = (
                stats[i]
                if what in ["Chats", "Users"]
                else stats[i]["spot"]
            )
            results[str(i)] = top_list
            list_arranged = dict(
                sorted(
                    results.items(),
                    key=lambda item: item[1],
                    reverse=True,
                )
            )
        if not results:
            return mystic.edit(_["gstats_2"], reply_markup=upl)
        msg = ""
        limit = 0
        total_count = 0
        if what in ["Tracks", "Here"]:
            for items, count in list_arranged.items():
                total_count += count
                if limit == 10:
                    continue
                limit += 1
                details = stats.get(items)
                title = (details["title"][:35]).title()
                if items == "telegram":
                    msg += f"üçí [·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥ç·¥á·¥Ö…™·¥Ä](https://t.me/DevilsHeavenMF) ** ·¥© ü·¥Ä è·¥á·¥Ö {count} ·¥õ…™·¥ç·¥ás**\n\n"
                else:
                    msg += f"üìå [{title}](https://www.youtube.com/watch?v={items}) ** ·¥© ü·¥Ä è·¥á·¥Ö {count} ·¥õ…™·¥ç·¥ás**\n\n"

            temp = (
                _["gstats_4"].format(
                    queries,
                    config.MUSIC_BOT_NAME,
                    len(stats),
                    total_count,
                    limit,
                )
                if what == "Tracks"
                else _["gstats_7"].format(
                    len(stats), total_count, limit
                )
            )
            msg = temp + msg
        return msg, list_arranged

    try:
        msg, list_arranged = await loop.run_in_executor(
            None, get_stats
        )
    except Exception as e:
        print(e)
        return
    limit = 0
    if what in ["Users", "Chats"]:
        for items, count in list_arranged.items():
            if limit == 10:
                break
            try:
                extract = (
                    (await app.get_users(items)).first_name
                    if what == "Users"
                    else (await app.get_chat(items)).title
                )
                if extract is None:
                    continue
                await asyncio.sleep(0.5)
            except:
                continue
            limit += 1
            msg += f"üíñ `{extract}` ·¥© ü·¥Ä è·¥á·¥Ö {count} ·¥õ…™·¥ç·¥ás ·¥è…¥  ô·¥è·¥õ.\n\n"
        temp = (
            _["gstats_5"].format(limit, MUSIC_BOT_NAME)
            if what == "Chats"
            else _["gstats_6"].format(limit, MUSIC_BOT_NAME)
        )
        msg = temp + msg
    med = InputMediaPhoto(media=config.GLOBAL_IMG_URL, caption=msg)
    try:
        await CallbackQuery.edit_message_media(
            media=med, reply_markup=upl
        )
    except MessageIdInvalid:
        await CallbackQuery.message.reply_photo(
            photo=config.GLOBAL_IMG_URL, caption=msg, reply_markup=upl
        )


@app.on_callback_query(filters.regex("TopOverall") & ~BANNED_USERS)
@languageCB
async def overall_stats(client, CallbackQuery, _):
    callback_data = CallbackQuery.data.strip()
    what = callback_data.split(None, 1)[1]
    if what != "s":
        upl = overallback_stats_markup(_)
    else:
        upl = back_stats_buttons(_)
    try:
        await CallbackQuery.answer()
    except:
        pass
    await CallbackQuery.edit_message_text(_["gstats_8"])
    served_chats = len(await get_served_chats())
    served_users = len(await get_served_users())
    total_queries = await get_queries()
    blocked = len(BANNED_USERS)
    sudoers = len(SUDOERS)
    mod = len(ALL_MODULES)
    assistant = len(assistants)
    playlist_limit = config.SERVER_PLAYLIST_LIMIT
    fetch_playlist = config.PLAYLIST_FETCH_LIMIT
    song = config.SONG_DOWNLOAD_DURATION
    play_duration = config.DURATION_LIMIT_MIN
    if config.AUTO_LEAVING_ASSISTANT == str(True):
        ass = " è·¥ás"
    else:
        ass = "…¥·¥è"
    cm = config.CLEANMODE_DELETE_MINS
    text = f"""** ô·¥è·¥õ's s·¥õ·¥Ä·¥õs ·¥Ä…¥·¥Ö …™…¥“ì·¥è:**

**·¥ç·¥è·¥Ö·¥ú ü·¥ás:** {mod}
**·¥Ñ ú·¥Ä·¥õs:** {served_chats} 
**·¥ús·¥á Äs:** {served_users} 
** ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö:** {blocked} 
**s·¥ú·¥Ö·¥è·¥á Äs:** {sudoers} 
    
**«´·¥ú·¥á Ä…™·¥ás:** {total_queries} 
**·¥Äss…™s·¥õ·¥Ä…¥·¥õs:** {assistant}
**·¥Äss ·¥Ä·¥ú·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á:** {ass}
**·¥Ñ ü·¥á·¥Ä…¥·¥ç·¥è·¥Ö·¥á:** {cm} ·¥ç…™…¥·¥ú·¥õ·¥ás

**·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥  ü…™·¥ç…™·¥õ:** {play_duration} ·¥ç…™…¥·¥ú·¥õ·¥ás
**·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™·¥ç…™·¥õ:** {song} ·¥ç…™…¥·¥ú·¥õ·¥ás
**·¥© ü·¥Ä è ü…™s·¥õ  ü…™·¥ç…™·¥õ:** {playlist_limit}
**·¥© ü·¥Ä è ü…™s·¥õ ·¥© ü·¥Ä è  ü…™·¥ç…™·¥õ:** {fetch_playlist}"""
    med = InputMediaPhoto(media=config.STATS_IMG_URL, caption=text)
    try:
        await CallbackQuery.edit_message_media(
            media=med, reply_markup=upl
        )
    except MessageIdInvalid:
        await CallbackQuery.message.reply_photo(
            photo=config.STATS_IMG_URL, caption=text, reply_markup=upl
        )


@app.on_callback_query(filters.regex("bot_stats_sudo"))
@languageCB
async def overall_stats(client, CallbackQuery, _):
    if CallbackQuery.from_user.id not in SUDOERS:
        return await CallbackQuery.answer(
            "·¥è…¥ ü è “ì·¥è Ä s·¥ú·¥Ö·¥è ·¥ús·¥á Äs.", show_alert=True
        )
    callback_data = CallbackQuery.data.strip()
    what = callback_data.split(None, 1)[1]
    if what != "s":
        upl = overallback_stats_markup(_)
    else:
        upl = back_stats_buttons(_)
    try:
        await CallbackQuery.answer()
    except:
        pass
    await CallbackQuery.edit_message_text(_["gstats_8"])
    sc = platform.system()
    p_core = psutil.cpu_count(logical=False)
    t_core = psutil.cpu_count(logical=True)
    ram = (
        str(round(psutil.virtual_memory().total / (1024.0**3)))
        + " …¢ ô"
    )
    try:
        cpu_freq = psutil.cpu_freq().current
        if cpu_freq >= 1000:
            cpu_freq = f"{round(cpu_freq / 1000, 2)}…¢ ú·¥¢"
        else:
            cpu_freq = f"{round(cpu_freq, 2)}·¥ç ú·¥¢"
    except:
        cpu_freq = "Unable to Fetch"
    hdd = psutil.disk_usage("/")
    total = hdd.total / (1024.0**3)
    total = str(total)
    used = hdd.used / (1024.0**3)
    used = str(used)
    free = hdd.free / (1024.0**3)
    free = str(free)
    mod = len(ALL_MODULES)
    db = pymongodb
    call = db.command("dbstats")
    datasize = call["dataSize"] / 1024
    datasize = str(datasize)
    storage = call["storageSize"] / 1024
    objects = call["objects"]
    collections = call["collections"]
    status = db.command("serverStatus")
    query = status["opcounters"]["query"]
    mongouptime = status["uptime"] / 86400
    mongouptime = str(mongouptime)
    served_chats = len(await get_served_chats())
    served_users = len(await get_served_users())
    total_queries = await get_queries()
    blocked = len(BANNED_USERS)
    sudoers = len(await get_sudoers())
    text = f""" ** ô·¥è·¥õ's s·¥õ·¥Ä·¥õs ·¥Ä…¥·¥Ö …™…¥“ì·¥è:**

       <b><u> ú·¥Ä Ä·¥Ö·¥°·¥Ä Ä·¥á</b><u/>
**·¥ç·¥è·¥Ö·¥ú ü·¥ás:** {mod}
**·¥© ü·¥Ä·¥õ“ì·¥è Ä·¥ç:** {sc}
** Ä·¥Ä·¥ç:** {ram}
**·¥© ú ès…™·¥Ñ·¥Ä ü ·¥Ñ·¥è Ä·¥ás:** {p_core}
**·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ·¥è Ä·¥ás:** {t_core}
**·¥Ñ·¥©·¥ú “ì Ä·¥á«´·¥ú·¥á…¥·¥Ñ è:** {cpu_freq}

       <b><u>s·¥è“ì·¥õ·¥°·¥Ä Ä·¥á</b><u/>
**·¥© è·¥õ ú·¥è…¥ :** {pyver.split()[0]}
**·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç :** {pyrover}
**·¥© è-·¥õ…¢·¥Ñ·¥Ä ü üs :** {pytgver}

        <b><u>s·¥õ·¥è Ä·¥Ä…¢·¥á</b><u/>
**·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á:** {total[:4]} GiB
**·¥ús·¥á·¥Ö:** {used[:4]} GiB
**“ì Ä·¥á·¥á:** {free[:4]} GiB
        
      <b><u>·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ s·¥õ·¥Ä·¥õs</b><u/>
**·¥Ñ ú·¥Ä·¥õs:** {served_chats} 
**·¥ús·¥á Äs:** {served_users} 
** ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö:** {blocked} 
**s·¥ú·¥Ö·¥è·¥á Äs:** {sudoers} 

      <b><u>·¥ç·¥è…¥…¢·¥è ·¥Ö·¥Ä·¥õ·¥Ä ô·¥Äs·¥á</b><u/>
**·¥ú·¥©·¥õ…™·¥ç·¥á:** {mongouptime[:4]} Days
**s…™·¥¢·¥á:** {datasize[:6]} Mb
**s·¥õ·¥è Ä·¥Ä…¢·¥á:** {storage} Mb
**·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥s:** {collections}
**·¥ã·¥á ès:** {objects}
**«´·¥ú·¥á Ä…™·¥ás:** `{query}`
** ô·¥è·¥õ «´·¥ú·¥á Ä…™·¥ás:** `{total_queries} `
    """
    med = InputMediaPhoto(media=config.STATS_IMG_URL, caption=text)
    try:
        await CallbackQuery.edit_message_media(
            media=med, reply_markup=upl
        )
    except MessageIdInvalid:
        await CallbackQuery.message.reply_photo(
            photo=config.STATS_IMG_URL, caption=text, reply_markup=upl
        )


@app.on_callback_query(
    filters.regex(pattern=r"^(TOPMARKUPGET|GETSTATS|GlobalStats)$")
    & ~BANNED_USERS
)
@languageCB
async def back_buttons(client, CallbackQuery, _):
    try:
        await CallbackQuery.answer()
    except:
        pass
    command = CallbackQuery.matches[0].group(1)
    if command == "TOPMARKUPGET":
        upl = top_ten_stats_markup(_)
        med = InputMediaPhoto(
            media=config.GLOBAL_IMG_URL,
            caption=_["gstats_9"],
        )
        try:
            await CallbackQuery.edit_message_media(
                media=med, reply_markup=upl
            )
        except MessageIdInvalid:
            await CallbackQuery.message.reply_photo(
                photo=config.GLOBAL_IMG_URL,
                caption=_["gstats_9"],
                reply_markup=upl,
            )
    if command == "GlobalStats":
        upl = get_stats_markup(
            _,
            True if CallbackQuery.from_user.id in SUDOERS else False,
        )
        med = InputMediaPhoto(
            media=config.GLOBAL_IMG_URL,
            caption=_["gstats_10"].format(config.MUSIC_BOT_NAME),
        )
        try:
            await CallbackQuery.edit_message_media(
                media=med, reply_markup=upl
            )
        except MessageIdInvalid:
            await CallbackQuery.message.reply_photo(
                photo=config.GLOBAL_IMG_URL,
                caption=_["gstats_10"].format(config.MUSIC_BOT_NAME),
                reply_markup=upl,
            )
    if command == "GETSTATS":
        upl = stats_buttons(
            _,
            True if CallbackQuery.from_user.id in SUDOERS else False,
        )
        med = InputMediaPhoto(
            media=config.STATS_IMG_URL,
            caption=_["gstats_11"].format(config.MUSIC_BOT_NAME),
        )
        try:
            await CallbackQuery.edit_message_media(
                media=med, reply_markup=upl
            )
        except MessageIdInvalid:
            await CallbackQuery.message.reply_photo(
                photo=config.STATS_IMG_URL,
                caption=_["gstats_11"].format(config.MUSIC_BOT_NAME),
                reply_markup=upl,
            )

@app.on_message(filters.command("‚ú≠ ÿ™ÿ≠ŸÉŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØ", "") & SUDOERS)
async def helpercn(client, message):
   userbot = await get_client(1)
   me = await userbot.get_me()
   i = f"@{me.username} : {me.id}" if me.username else me.id
   b = await client.get_chat(me.id)
   b = b.bio if b.bio else "‚ú≠ ŸÑÿß ŸäŸàÿ¨ÿØ ÿ®ÿßŸäŸà"
   kep = ReplyKeyboardMarkup([["‚ú≠ ŸÅÿ≠ÿµ ÿßŸÑŸÖÿ≥ÿßÿπÿØ"], ["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿßŸàŸÑ", "‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ™ÿßŸÜŸä"], ["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ®ÿßŸäŸà"], ["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ"], ["‚Ä¢ ÿßÿ∂ÿßŸÅŸá ÿµŸàÿ±Ÿá", "‚ú≠ ÿßÿ≤ÿßŸÑÿ© ÿßŸÑÿµŸàÿ±"], ["‚ú≠ ÿ±ÿ¨Ÿàÿπ"]], resize_keyboard=True)
   await message.reply_text(f"**ÿ£ŸáŸÑÿß ÿ®ŸÉ ÿπÿ≤Ÿäÿ≤Ÿä ÿßŸÑŸÖÿ∑Ÿàÿ± **\n**ŸáŸÜÿß ŸÇÿ≥ŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØ**\n**{me.mention}**\n**{i}**\n**{b}**", reply_markup=kep)

@app.on_message(command("‚ú≠ ÿßŸÑÿßÿ≠ÿµÿßÿ¶Ÿäÿßÿ™") & SUDOERS)
async def bb(client, message):
  chats = len(await get_served_chats())
  users = len(await get_served_users())
  await message.reply_text(f"ÿπÿØÿØ ÿßŸÑŸÖÿ¨ŸÖŸàÿπÿßÿ™ ‚úÖ : {chats}\nÿπÿØÿØ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ‚úÖ : {users}")

@app.on_message(
    filters.command(STATS_COMMAND)
    & filters.group
    & ~filters.edited
    & ~BANNED_USERS
    
)

@app.on_message(filters.command(["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ™ÿßŸÜŸä", "ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ™ÿßŸÜŸä"], "") & SUDOERS)
async def changelast(client: Client, message):
   try:
    if message.text == "‚Ä¢ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ™ÿßŸÜŸä ‚Ä¢":
      return await message.reply_text("‚Ä¢ ÿßŸÑÿßŸÜ ŸÇŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿπŸÑŸä ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸÑŸÖŸá ÿßŸÑÿßÿ≥ŸÖ ÿßŸÑÿ™ÿßŸÜŸä ‚Ä¢")
    name = message.reply_to_message.text
    client = await get_client(1)
    await client.update_profile(last_name=name)
    await message.reply_text("**ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿ®ŸÜÿ¨ÿßÿ≠ .‚úÖ**")
   except Exception as es:
     await message.reply_text(f" ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿßÿ≥ŸÖ ")


@app.on_message(filters.command(["‚ú≠ ÿßÿ≤ÿßŸÑŸá ÿµŸàÿ±Ÿá"], "") & SUDOERS)
async def changephotos(client: Client, message):
       try:
        client = await get_client(1)
        photos = await client.get_profile_photos("me")
        await client.delete_profile_photos([p.file_id for p in photos[1:]])
        await message.reply_text("**ÿ™ŸÖ ÿßÿ≤ÿßŸÑŸá ÿµŸàÿ±Ÿá ÿ®ŸÜÿ¨ÿßÿ≠ .‚úÖ**")
       except Exception as es:
         await message.reply_text(f" ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßÿ≤ÿßŸÑŸá ÿßŸÑÿµŸàÿ±Ÿá")


@app.on_message(filters.command(["‚ú≠ ÿßÿ∂ÿßŸÅŸá ÿµŸàÿ±Ÿá", "ÿµŸàÿ±Ÿá ÿ¨ÿØŸäÿØŸá"], "") & SUDOERS)
async def changephoto(client: Client, message):
   try:
    if message.text == "‚ú≠ ÿßÿ∂ÿßŸÅŸá ÿµŸàÿ±Ÿá":
      return await message.reply_text("‚Ä¢ ÿßŸÑÿßŸÜ ŸÇŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿπŸÑŸä ÿßŸÑÿµŸàÿ±ÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ© ÿ®ŸÉŸÑŸÖŸá ÿµŸàÿ±Ÿá ÿ¨ÿØŸäÿØŸá ‚Ä¢")
    m = message.reply_to_message
    photo = await m.download()
    client = await get_client(1)
    await client.set_profile_photo(photo=photo)
    await message.reply_text("**ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿµŸàÿ±Ÿá ÿßŸÑÿ≠ÿ≥ÿßÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿ®ŸÜÿ¨ÿßÿ≠ .‚úÖ**") 
   except Exception as es:
     await message.reply_text(f" ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿµŸàÿ±Ÿá")
     
@app.on_message(filters.command(["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ‚Ä¢", "ÿßŸÑŸäŸàÿ≤ÿ±"], "") & SUDOERS)
async def changeusername(client: Client, message):
   try:
    if message.text == "‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ‚Ä¢":
      return await message.reply_text("‚Ä¢ ÿßŸÑÿßŸÜ ŸÇŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿπŸÑŸä ÿßŸÑŸäŸàÿ≤ÿ± ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿØŸàŸÜ ÿπŸÑÿßŸÖÿ© @ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸÑŸÖŸá ÿßŸÑŸäŸàÿ≤ÿ± ‚Ä¢")
    name = message.reply_to_message.text
    client = await get_client(1)
    await client.set_username(name)
    await message.reply_text("**ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ŸÜÿ¨ÿßÿ≠ .‚úÖ**")
   except Exception as es:
     await message.reply_text(f" ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ∫Ÿäÿ± ÿßÿ≥ŸÖ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ")
     
@app.on_message(filters.command(["‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ®ÿßŸäŸà", "ÿßŸÑÿ®ÿßŸäŸà ÿßŸÑÿ¨ÿØŸäÿØ"], "") & SUDOERS)
async def changebio(client: Client, message):
   try:
    if message.text == "‚ú≠ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ®ÿßŸäŸà":
      return await message.reply_text("‚Ä¢ ÿßŸÑÿßŸÜ ŸÇŸÖ ÿ®ÿßŸÑÿ±ÿØ ÿπŸÑŸä ÿßŸÑÿ®ÿßŸäŸà ÿßŸÑÿ¨ÿØŸäÿØ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸÑŸÖÿ© ÿßŸÑÿ®ÿßŸäŸà ÿßŸÑÿ¨ÿØŸäÿØ ‚Ä¢")
    name = message.reply_to_message.text
    client = await get_client(1)
    await client.update_profile(bio=name)
    await message.reply_text("**ÿ™ŸÖ ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ®ÿßŸäŸà ÿ®ŸÜÿ¨ÿßÿ≠ .‚úÖ**")
   except Exception as es:
     await message.reply_text(f" ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ∫Ÿäÿ± ÿßŸÑÿ®ÿßŸäŸà ")



@app.on_message(filters.command("‚ú≠ ŸÅÿ≠ÿµ ÿßŸÑŸÖÿ≥ÿßÿπÿØ", "") & SUDOERS)
async def userrrrr(client: Client, message):
    mm = await message.reply_text("Collecting stats")
    start = datetime.now()
    u = 0
    g = 0
    sg = 0
    c = 0
    b = 0
    a_chat = 0
    client = await get_client(1)
    Meh=await client.get_me()
    usere = Meh.username
    group = ["supergroup", "group"]
    async for dialog in client.iter_dialogs():
        if dialog.chat.type == "private":
            u += 1
        elif dialog.chat.type == "bot":
            b += 1
        elif dialog.chat.type == "group":
            g += 1
        elif dialog.chat.type == "supergroup":
            sg += 1
            user_s = await dialog.chat.get_member(int(Meh.id))
            if user_s.status in ("creator", "administrator"):
                a_chat += 1
        elif dialog.chat.type == "channel":
            c += 1

    end = datetime.now()
    ms = (end - start).seconds
    await mm.edit_text(
        """**Íú±·¥õ·¥Ä·¥õÍú± Íú∞·¥á·¥Ä·¥õ·¥Ñ ú·¥á·¥Ö …™…¥ {} Íú±·¥á·¥Ñ·¥è…¥·¥ÖÍú± ‚úÖ**
‚úÖ**ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸÑÿØŸäŸá{} ŸÅŸä ÿßŸÑÿÆÿßÿµ.**
üè∑Ô∏è**ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ ŸÅŸä {} ŸÖÿ¨ŸÖŸàÿπÿßÿ™.**
üè∑Ô∏è**ÿßŸÑŸÖÿ≥ÿßÿπÿØ ŸÅŸä {} Íú±·¥ú·¥ò·¥á Ä …¢ Ä·¥è·¥ú·¥òÍú±.**
üè∑Ô∏è** ÿßŸÑŸÖÿ≥ÿßÿπÿØ ŸÅŸä {} ŸÇŸÜŸàÿßÿ™.**
üè∑Ô∏è**ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßÿØŸÖŸÜ ŸÅŸä {} ÿ¥ÿßÿ™.**
üè∑Ô∏è**ÿßŸÑŸÖÿ≥ÿßÿπÿØ ŸÑÿØŸäŸá ÿ®Ÿàÿ™ ŸÅÿßŸÑÿÆÿßÿµ = {}**
‚ö†Ô∏è**Íú∞·¥á·¥Ä·¥õ·¥Ñ ú·¥á·¥Ö  ô è ·¥úÍú±…™…¥…¢ @{} **""".format(
            ms, u, g, sg, c, a_chat, b, usere
        )
    )

